Jackie PaiProject ReportFor my final Functional project, I’ve created an interactive map of some of the coffee shops of campus.*The Program*The main body of this program, in Main.elm, implements an MVC structure. The model has two variables – a position, marking where the map is currently centered, and a CoffeeShop, which is a structure I build to store information about each coffee shop. The CoffeeShop model, as well as GMPos and Entry models (for the google map and notes, respectively) are held in SharedModels.elm.   The map itself is generated and manipulated using the Google Maps JavaScript API, in the index.html file. The Elm program can trigger changes in the map through the use of ports, as done through the navigation buttons (Re-Center, North, South, West, East) which move the map physically, and the coffee shop buttons, which will center around a particular shop and bring up a small info window with the name of the shop on the map. The sidebar holds most of the Elm interactivity. As mentioned before, each of the buttons at the top of the sidebar manipulate the map. Each of the coffee shop buttons also brings up information about the selected shop, including its name, location, rating, and notes. The starting information for all of the CoffeeShops (which can later be edited by the program) and many of the functions involving using the data is held in Data.elm.  The buttons for rating 1-5 trigger a change in the number of coffee cups that show up beneath the name of the shop.Below the rating is the notes section. This was built based off of the to-do example on the Elm website. The functionality for creating, adding, editing, and deleting notes was created in Notes.elm, which was then imported into Main.elm. The code for viewing the notes is in Main.elm. As you use the program and update the notes or rating, the program saves the new state to your local storage. Reloading the page will not get rid of your saved data – instead, a “Reset All” button is included to clear out all saved state. *Reflection*One particularly challenging part of this project was being able to have the elm program and JavaScript/HTML interact with each other. In setting up this interactivity, I utilized ports a lot.  I also found saving the state of the application to be a little difficult, as I came across issues about how to store and then retrieve the information I needed, using various data types.A part of this project that I really enjoyed was building HTML using elm. The buttons and their interactivity within the sidebar were all built in the Main.elm file, and worked very well within the MVC framework.